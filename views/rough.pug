

    //- a(href='/api/donation',class="donation") Sell?
    //-           a(href='/api/donation',class="donation") Donate?
//- // function checkFileType(file, cb){
//- //   const filetypes = /jpeg|jpg|png|gif/;
//- //   const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
//- //   const mimetype = filetypes.test(file.mimetype);                               
//- //   if(mimetype && extname){                 
//- //     return cb(null,true);
//- //   } else {               
//- //     cb('Error: Images Only!');
//- //   }
//- // }

//- div.logo  
//-              img(src="https://img.icons8.com/dusk/64/000000/huawei-logo.png")
          li #[a(href="/api/") Home]
          li #[a(href="/api/about") About Us]
          li #[a(href="/api/services") Services]
          li #[a(href="/api/contact") Contact Us]
          div.dropdown  
              a(href="/api/") Want to Sell?
              div(class="dropdown-content")
                  a(href='/api/sell') Sell?
                  a(href='/api/donate') Donate?
          li #[a(href="/api/login") Login] 
          li #[a(href="/api/SignUp") SignUp] 
nav.navbar.background.h-nav-resp
       ul.nav-list.v-class-resp 
          
          a(href="/api/donation",class="donation")
              img(src="https://img.icons8.com/ios-filled/50/000000/charity.png")
          div(class="notification",onclick="document.getElementById('id01').style.display='block'")
              img(src="https://img.icons8.com/material-rounded/24/000000/appointment-reminders.png")
              span(class="notify") 0    
       div.rightNav.v-class-resp  
          form(action="/api/search",method="post")
              input(type="text",name="search", id="search",placeholder="Search items here")
          img(src="https://img.icons8.com/material-rounded/24/000000/search.png")    
       div.burger
            div.line
            div.line
            div.line
             div(class="mycart",onclick="document.getElementById('id01').style.display='block'")      
                img(src="https://img.icons8.com/ios-glyphs/30/000000/mine-cart.png")  
                span(class="span-cart") 0 
    block content
    footer#footer
       |   Copyright Â© 2020 YouTellWeSell.com | All rights reserved
    
    script.  
        const data1 = !{jsStringify(data1)};
        var modal = document.getElementById('id01');
        window.onclick = function(event) {
        if (event.target == modal) {
        modal.style.display = "none";
        }
        }   
        var index = 0;
        var id;
        var trendingEach = document.getElementsByClassName('trending-each')[0];
        change();
        function change() {
            trendingEach.innerHTML = "";
            for (var i = index; i < index + 3; i++) {
                var images = data1[i].image;
                var img_id = data1[i].current_id;
                var cartRowC = `<a href="/image/${img_id}">   
                        <img src="/static/${images}",class="product-image-img">
                        </a>`     
                trendingEach.innerHTML += cartRowC;
            }
            if (i > 10) {
            index = 0;
            }
            else
            index = i;
            setTimeout(change, 2000);
       }

div(class="slideshow-container")
                each n,i in data
                    div(class="mySlides fade")
                        div(class="numbertext") #{i+1}
                        img(src='/static/images/upload_images/'+data[i].image)     
 
                a(class="prev" onclick="plusSlides(-1)") &#10094
                a(class="next" onclick="plusSlides(1)") &#10095  
            br   
            div(style="text-align:center" class="center")  
                each n,i in data
                    img(src='/static/images/upload_images/'+data[i].image, class="dot", onclick="currentSlide(#{i+1})")


                    div.trending-each
                each n,i in data1
                    div.box-main-tren 
                        a(href='/api/image/'+data1[i].current_id)
                            img(src='/static/'+data1[i].image,class="product-image-img") 

                            section#sponsorsSection
        h1 Our Sponsors 
        div#sponsors 
            img(src="https://img.icons8.com/color/192/000000/google-logo.png",class="spImage")
            img(src="https://img.icons8.com/color/192/000000/microsoft.png",class="spImage")
            img(src="https://img.icons8.com/doodle/192/000000/uber-app.png",class="spImage")
            img(src="https://img.icons8.com/doodle/192/000000/amazon.png",class="spImage")   


             .overlay-container
            .overlay
                .overlay-panel.overlay-left
                    h1   
                    | Welcome Back!
                    p    
                    | To keep connected with us please login with your personal info
                    button#signIn.ghost Sign In
                .overlay-panel.overlay-right
                    h1   
                    | Hello, Friend!
                    p    
                    | Enter your personal details and start journey with us


                    var email=req.body.email;
    var password=req.body.psw;
    var passwordConfirm=req.body.pswconfirm;
      if(!email||!password||!passwordConfirm){
        return res.redirect('/signup',{message:'Please provide an email and password'});
      }
      db.query('SELECT email FROM `login-sign` WHERE email=?',[email],async (err,results,fields)=>{
       if(err)
       {
         console.log(err);
       }
       if(results.length>0){
         return res.render('signUp.pug',{message:'The email is already in use'})
       }
       else if(password!=passwordConfirm){
         return res.render('signUp.pug',{message:'Password doesnt match'})
       }
       const token=jwt.sign({email,password},process.env.JWT_SECRET,{
        expiresIn:process.env.JWT_EXPIRES_IN
      });
  
       const data = {
        from: 'chanchaltyagi3727@gmail.com',
        to: email,
        subject: 'Account Activation Link',
        html:`
            <h2>Please click on given link to activate your account</h2>
            <p>${process.env.CLIENT_URL}/authentication/activate/${token}</p>
        `
      };  
      mg.messages().send(data, function (error, body) {
        if(error)
        {
          return res.json({
            error:err.message
          })
        }
        return res.json({message:'Email has been sent , kindly activate your account'});
      });
      });
  };

  module.exports.email_activate_get=(req,res)=>{
    const params={}
    res.status(200).render('otp.pug',params)
  };
  
  module.exports.email_activate_post=(req,res)=>{
    const {token}=req.body;
    if(token)
    {
      jwt.verify(token,process.env.JWT_SECRET,function(err,decodedToken){
        if(err){
          return res.status(400).json({error:"Incorrect or Expired link"})
        }
        const {email,password}=decodedToken;
        db.query('SELECT email FROM `login-sign` WHERE email=?',[email],async (err,results,fields)=>{
          if(err)
          {
            console.log(err);
          }
          if(results.length>0){
            return res.render('signUp.pug',{message:'The email is already in use'})
          }
          let hashedPassword=await bcrypt.hash(password,8);
          var sql="INSERT INTO `login-sign`(`email`,`password`) VALUES ('" + email + "','" + hashedPassword + "')";
          db.query(sql,function(err,results){
            if(err){
              console.log("Error in signup while account activation link: ",err);
              return res.status(400).json({error:'Error activating account'})
            }
            else
            res.json({message:"Signup success"}) 
          })
        })
      })
    }else{
      return res.json({error:"Something went wrong"})
    }
  };
  
  module.exports.forgot_password=(req,res)=>{
      const {email}=req.body;
      db.query('SELECT email FROM `login-sign` WHERE email=?',[email],async (err,results,fields)=>{
        if(err||results.length<=0)
        {
          return res.send({message:'Email doesnt exists'})
        }
        const token=jwt.sign({id:results[0].id},process.env.JWT_RESET_KEY,{
          expiresIn:process.env.JWT_EXPIRES_IN
        });
    
         const data = {
          from: 'chanchaltyagi3727@gmail.com',
          to: email,
          subject: 'Reset Password Link',
          html:`
              <h2>Please click on given link to reset your account</h2>
              <p>${process.env.CLIENT_URL}/resetPassword/${token}</p>
          `
        }; 
      var sql1="UPDATE `login-sign` SET `resetlink` = ${token} WHERE `id`='"+ results[0].id+"'";
      db.query(sql1,function(err,results){
        if(err){
          return res.status(400).json({error:'Reset Password Link error'})
        }
        else
        {
          mg.messages().send(data, function (error, body) {
            if(error)
            {
              return res.json({
                error:err.message
              })
            }
            return res.json({message:'Email has been sent , kindly follow the instructions'});
          });
        }
      })
      })
    };
    
  module.exports.reset_password=(req,res)=>{
    const {resetLink,newPass}=req.body;
    if(resetLink)
    {
      jwt.verify(resetLink,process.env.JWT_RESET_KEY,function(err,decodedToken){
        if(err){
          return res.status(400).json({error:"Incorrect or Expired link"})
        }
        db.query('SELECT * FROM `login-sign` WHERE `resetlink`=?',[resetLink],async (err,results,fields)=>{
          if(err||results.length<=0)
          {
            return res.status(400).json({message:'The user with this token doesnt exists'})
          }
          let hashedPassword=await bcrypt.hash(newPass,8);
          var sql="UPDATE `login-sign` SET `password` = ${hashedPassword} WHERE `resetlink`=${resetLink}";
          db.query(sql,function(err,results){
            if(err){
              return res.status(400).json({error:'Reset Password Link error'})
            }
            else
            {
                return res.json({message:'Your password has been changed'});
            }
          });
        });
      });
    } 
    else{
      return res.status(401).json({Error:'Authentication error'})
    }
  };

  module.exports.login_post=async (req,res)=>{
    try{
      const email=req.body.email;
      const password=req.body.psw;
      if(!email||!password){
        return res.status(400).render('login.pug',{message:'Please provide an email and password'})
      }
      db.query('SELECT * FROM `login-sign` WHERE email=?',[email],async (err,results,fields)=>{
        if(!results||!(await bcrypt.compare(password,results[0].password))){
          res.status(401).render('login.pug',{message:'Email or password is incorrect'})
        }
        else{
          const id=results[0].id;
          const token=jwt.sign({ id },process.env.JWT_SECRET,{
            expiresIn:process.env.JWT_EXPIRES_IN
          });
          console.log('The token is:'+token);
          const cookieOptions={
            expires: new Date(
              Date.now() + process.env.JWT_COOKIE_EXPIRES*24*60*60*1000
            ),
            httpOnly: true
          }
          res.cookie('jwt',token,cookieOptions);
          res.status(200).redirect('/');
        }
      })
    }catch(err){
       console.log(err);
    }
    };
  
  